  Str1 = "Diện tích: "
  Str2 = "dien tich dat"
  fixed_str1 = remove_accents(Str1)
  fixed_str2 = remove_accents(Str2)
  Ratio = fuzz.ratio(fixed_str1,fixed_str2)
  Partial_Ratio = fuzz.partial_ratio(fixed_str1,fixed_str2)
  Token_Sort_Ratio = fuzz.token_sort_ratio(fixed_str1,fixed_str2)
  Token_Set_Ratio = fuzz.token_set_ratio(fixed_str1,fixed_str2)
  print(Ratio)
  print(Partial_Ratio)
  print(Token_Sort_Ratio)
  print(Token_Set_Ratio)


# -*- coding: utf8 -*-
import json
import re
from ulti import remove_accents
from fuzzywuzzy import fuzz
from fuzzywuzzy import process


with open('sample.json') as f:
    sample = json.load(f)


#old pattern to capture float
numeric_const_pattern = ' (?: (?: \d* \. \d+ ) | (?: \d+ \.? ) )(?: [Ee] \d+ ) ?'
rx = re.compile(numeric_const_pattern, re.VERBOSE)

#pattern to capture numbers
r1 = re.compile(r'\s?\d+[.,]?\d*\s?[^a-z0-9*.()-,]?')
#pattern to capture AxB
r2 = re.compile(r'\d+[.,]?\d*\s?(m2|m)?\s?[xX*]\s?\d+[.,]?\d*', re.VERBOSE)

"""deal with dt cong nhan"""
def deal_with_dt_congnhan(sample, key_dt_congnhan):
  area_cal = 0
  calculation = 1
  info_of_areacal = []
  hecta = ["ha", "hecta"]
  in_hecta = False

  for item in range(len(sample["attributes"]) - 1):

    if sample["attributes"][item]["type"]=="area" and sample["attributes"][item-1]["type"] == "normal":

      format_areacontent = re.sub(r'\s+', '', sample["attributes"][item]["content"])
      format_areacontent = format_areacontent.replace(',','.')

      format_normalcontent = re.sub(r'\s+', '', sample["attributes"][item-1]["content"])

      areacontent = remove_accents(format_areacontent)
      normalcontent = remove_accents(format_normalcontent)

      if hecta[0] in areacontent or hecta[1] in areacontent:
        in_hecta = True

      highest_ratio = process.extractOne(normalcontent,key_dt_congnhan)

      if highest_ratio[1] >= 80:
        a_x_b = r2.search(areacontent)
        if a_x_b != None:
          info_of_areacal = r1.findall(a_x_b.group())
        else:
          info_of_areacal = r1.findall(areacontent)
          rx.findall(areacontent)
        info_of_areacal = [float(i) for i in info_of_areacal]
  
      
  if len(info_of_areacal) == 1:
    area_cal = info_of_areacal[0]
  elif len(info_of_areacal) == 2:
    if info_of_areacal[0] > 2 and info_of_areacal[1] > 2:
      area_cal = info_of_areacal[0]*info_of_areacal[1]
    elif info_of_areacal[0] > 2 and info_of_areacal[1] == 2:
      area_cal = info_of_areacal[0]
    elif info_of_areacal[0] == 2 and info_of_areacal[1] > 2:
      area_cal = info_of_areacal[1]
  elif len(info_of_areacal) > 2:
    for i in range(2):
      if i == 2:
        break
      else:
        calculation *= info_of_areacal[i]
  
  if in_hecta == True:
    area_cal *= 10000

  if area_cal != 0:
    return area_cal
  else:
    return 0



"""deal with dt dat"""
def deal_with_dt_dat(sample, key_dt_dat, special_case):
  area_cal = 0
  calculation = 1
  info_of_areacal = []
  hecta = ["ha", "hecta"]
  in_hecta = False
  array_of_area = []
  
  for item in range(len(sample["attributes"]) - 1):

    if sample["attributes"][item]["type"]=="area":

      format_areacontent = re.sub(r'\s+', '', sample["attributes"][item]["content"])
      format_areacontent = format_areacontent.replace(',','.')

      format_prevcontent = re.sub(r'\s+', '', sample["attributes"][item-1]["content"])

      areacontent = remove_accents(format_areacontent)
      prevcontent = remove_accents(format_prevcontent)

      if hecta[0] in areacontent or hecta[1] in areacontent:
        in_hecta = True

      highest_ratio = process.extractOne(prevcontent,key_dt_dat)
      ratio_of_m2 = fuzz.partial_ratio(areacontent,"m2")
      ratio_of_ha = fuzz.partial_ratio(areacontent,"ha")

      if highest_ratio[1] >= 60 or ratio_of_m2 >= 50 or ratio_of_ha >= 80:
        a_x_b = r2.search(areacontent)
        if a_x_b != None:
          info_of_areacal = r1.findall(a_x_b.group())
        else:
          info_of_areacal = r1.findall(areacontent)
          rx.findall(areacontent)
        info_of_areacal = [float(i) for i in info_of_areacal]
        
        if len(info_of_areacal) == 1:
          area_cal = info_of_areacal[0]
        elif len(info_of_areacal) == 2:
          if info_of_areacal[0] > 2 and info_of_areacal[1] > 2:
            area_cal = info_of_areacal[0]*info_of_areacal[1]
          elif info_of_areacal[0] > 2 and info_of_areacal[1] == 2:
            area_cal = info_of_areacal[0]
          elif info_of_areacal[0] == 2 and info_of_areacal[1] > 2:
            area_cal = info_of_areacal[1]
        elif len(info_of_areacal) > 2:
          for i in range(2):
            if i == 2:
              break
            else:
              calculation *= info_of_areacal[i]
              area_cal = calculation

        array_of_area.append(area_cal)
      
  result = area_cal
  print("array of area",array_of_area)
  if len(array_of_area) > 2:
    if array_of_area[0] != array_of_area[1]:
      special_case = True
    area_cal = max(array_of_area)

  if in_hecta == True:
    area_cal *= 10000

  if area_cal != 0:
    return area_cal, special_case
  else:
    return 0, special_case

"""deal with dt xaydung/san"""
def deal_with_dt_xaydung_san(sample, key_dt_xaydung_san):
  area_cal = 0
  calculation = 1
  info_of_areacal = [] 
  in_hecta = False

  for item in range(len(sample["attributes"]) - 1):

    if sample["attributes"][item]["type"] == "area":

      format_areacontent = re.sub(r'\s+', '', sample["attributes"][item]["content"])
      format_areacontent = format_areacontent.replace(',','.')
      
      format_prevcontent = re.sub(r'\s+', '', sample["attributes"][item-1]["content"])

      areacontent = remove_accents(format_areacontent)
      prevcontent = remove_accents(format_prevcontent)

      highest_ratio = process.extractOne(prevcontent,key_dt_xaydung_san)

      if highest_ratio[1] >= 80:
        a_x_b = r2.search(areacontent)
        if a_x_b != None:
          info_of_areacal = r1.findall(a_x_b.group())
        else:
          info_of_areacal = r1.findall(areacontent)
          rx.findall(areacontent)
        info_of_areacal = [float(i) for i in info_of_areacal]
  
  if len(info_of_areacal) == 1:
    area_cal = info_of_areacal[0]
  elif len(info_of_areacal) == 2:
    if info_of_areacal[0] > 2 and info_of_areacal[1] > 2:
      area_cal = info_of_areacal[0]*info_of_areacal[1]
    elif info_of_areacal[0] > 2 and info_of_areacal[1] == 2:
      area_cal = info_of_areacal[0]
    elif info_of_areacal[0] == 2 and info_of_areacal[1] > 2:
      area_cal = info_of_areacal[2]
  elif len(info_of_areacal) > 2:
    for i in range(2):
      if i == 2:
        break
      else:
        calculation *= info_of_areacal[i]
    area_cal = calculation

  if in_hecta == True:
    area_cal *= 10000

  if area_cal != 0:
    if sample["floor"] != 0: 
      return area_cal/sample["floor"]
    else:
      return area_cal
  else:
    return 0




    


def xacdinh(dict_input: dict) -> float:
  """Phân biệt diện tích đất
  Arguments:
      inp_str {dict} -- dict chứa 3 thông tin sau:
          id              : id của bài đăng
          content         : content của bài đăng
          realestate_type : loại bất động sản
          floor           : số tầng
  Returns:
      float - gía trị của biến area_cal
  Như trong doc thì có 3 loại diện tích:
  """

  """dt_congnhan > dt_dat > dt_xaydung_san"""
  key_dt_congnhan = ["dientichcongnhan","cn","dtcn","congnhan"]
  key_dt_dat = ["dientichdat","dat"]
  key_dt_xaydung_san = ["dientichxaydung","dientichsan","san","xaydung","dt"]

  dt_congnhan = 0.0
  dt_dat = 0.0
  dt_xaydung_san = 0.0

  area_cal = 0.0

  special_case = False;

  ## code goes here
  dt_congnhan = deal_with_dt_congnhan(sample, key_dt_congnhan)
  dt_dat, special_case = deal_with_dt_dat(sample, key_dt_dat, special_case)

  print("dt_congnhan: ", dt_congnhan)
  print("dt_dat: ",dt_dat)
  if dt_congnhan != 0 and special_case == False:
    area_cal = dt_congnhan
  elif dt_dat != 0: 
    area_cal = dt_dat
  else:
    dt_xaydung_san = deal_with_dt_xaydung_san(sample, key_dt_xaydung_san)
    area_cal = dt_xaydung_san
    print("dt_xaydung_san: ", dt_xaydung_san)

  print(area_cal)
  print("Special case: ", special_case)
  ############################
  ## Return
  ############################
  return area_cal


xacdinh(sample)






  